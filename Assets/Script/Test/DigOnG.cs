using UnityEngine;
using UnityEngine.InputSystem; // üëà ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö New Input System

public class DigOnG_InputSystem : MonoBehaviour
{
    [Header("Digging Settings")]
    public float range = 0.05f;      // ‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î
    public float damage = 0.5f;      // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢
    public LayerMask digMask;        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å layer ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ç‡∏∏‡∏î‡πÑ‡∏î‡πâ
    
    [Header("Tool Settings")]
    public ToolType toolType = ToolType.HammerChisel; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠
    
    [Header("Feedback")]
    public bool showDebugGizmos = true;
    public Color gizmoColor = Color.green;

    void Update()
    {
        // ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° G ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏∏‡∏î
        if (Keyboard.current.gKey.wasPressedThisFrame)
        {
            PerformDig();
        }
    }

    void PerformDig()
    {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        Collider[] hitColliders = Physics.OverlapSphere(transform.position, range, digMask);
        int objectsAffected = 0;

        foreach (Collider col in hitColliders)
        {
            bool wasAffected = false;

            // ‡πÄ‡∏ä‡πá‡∏Ñ Fossil ‡∏Å‡πà‡∏≠‡∏ô
            Fossil fossil = col.GetComponent<Fossil>();
            if (fossil != null)
            {
                fossil.TakeDamage(damage, toolType);
                wasAffected = true;
                Debug.Log($"Hit Fossil with {toolType}, Damage: {damage}");
            }
            else // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Fossil ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ SoilBlock
            {
                SoilBlock block = col.GetComponent<SoilBlock>();
                if (block != null)
                {
                    // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏à‡∏∞‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏ö‡∏•‡πá‡∏≠‡∏Å
                    if (block.soilType == SoilType.Fossil)
                    {
                        Debug.LogWarning("Found fossil! Be careful!");
                        block.TakeDamage(damage * 0.5f);  // ‡∏ü‡∏≠‡∏™‡∏ã‡∏¥‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ 50%
                    }
                    else if (block.soilType == SoilType.NearFossil)
                    {
                        Debug.Log("Near fossil! Use more precise tools!");
                        block.TakeDamage(damage * 0.75f); // ‡πÉ‡∏Å‡∏•‡πâ‡∏ü‡∏≠‡∏™‡∏ã‡∏¥‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ 75%
                    }
                    else
                    {
                        block.TakeDamage(damage);         // ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ 100%
                    }
                    wasAffected = true;
                }
            }

            if (wasAffected)
            {
                objectsAffected++;
                Debug.Log($"Hit object at {col.transform.position}");
            }
        }

        if (objectsAffected > 0)
        {
            Debug.Log($"Affected {objectsAffected} objects");
        }
    }

    void OnDrawGizmosSelected()
    {
        if (!showDebugGizmos) return;
        
        Gizmos.color = gizmoColor;
        Gizmos.DrawWireSphere(transform.position, range);
    }
}